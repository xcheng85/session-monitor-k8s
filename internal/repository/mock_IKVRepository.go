// Code generated by mockery v2.36.0. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIKVRepository is an autogenerated mock type for the IKVRepository type
type MockIKVRepository struct {
	mock.Mock
}

// AddStreamEvent provides a mock function with given fields: ctx, streamKey, streamId, payload
func (_m *MockIKVRepository) AddStreamEvent(ctx context.Context, streamKey string, streamId string, payload interface{}) (string, error) {
	ret := _m.Called(ctx, streamKey, streamId, payload)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) (string, error)); ok {
		return rf(ctx, streamKey, streamId, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) string); ok {
		r0 = rf(ctx, streamKey, streamId, payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, streamKey, streamId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddToUnsortedSet provides a mock function with given fields: ctx, UnsortedSetKey, objects
func (_m *MockIKVRepository) AddToUnsortedSet(ctx context.Context, UnsortedSetKey string, objects ...*Object) (int64, error) {
	_va := make([]interface{}, len(objects))
	for _i := range objects {
		_va[_i] = objects[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, UnsortedSetKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*Object) (int64, error)); ok {
		return rf(ctx, UnsortedSetKey, objects...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*Object) int64); ok {
		r0 = rf(ctx, UnsortedSetKey, objects...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*Object) error); ok {
		r1 = rf(ctx, UnsortedSetKey, objects...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServerTimestamp provides a mock function with given fields: ctx
func (_m *MockIKVRepository) GetServerTimestamp(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *MockIKVRepository) Ping(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockIKVRepository creates a new instance of MockIKVRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIKVRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIKVRepository {
	mock := &MockIKVRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
