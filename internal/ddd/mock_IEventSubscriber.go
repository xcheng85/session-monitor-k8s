// Code generated by mockery v2.36.0. DO NOT EDIT.

package ddd

import mock "github.com/stretchr/testify/mock"

// MockIEventSubscriber is an autogenerated mock type for the IEventSubscriber type
type MockIEventSubscriber[T IEvent] struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: handler, events
func (_m *MockIEventSubscriber[T]) Subscribe(handler IEventHandler[T], events ...string) {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, handler)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewMockIEventSubscriber creates a new instance of MockIEventSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIEventSubscriber[T IEvent](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIEventSubscriber[T] {
	mock := &MockIEventSubscriber[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
