// Code generated by mockery v2.36.0. DO NOT EDIT.

package module

import (
	chi "github.com/go-chi/chi/v5"
	config "github.com/xcheng85/session-monitor-k8s/internal/config"
	ddd "github.com/xcheng85/session-monitor-k8s/internal/ddd"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/xcheng85/session-monitor-k8s/internal/repository"

	zap "go.uber.org/zap"
)

// MockIModuleContext is an autogenerated mock type for the IModuleContext type
type MockIModuleContext struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *MockIModuleContext) Config() config.IConfig {
	ret := _m.Called()

	var r0 config.IConfig
	if rf, ok := ret.Get(0).(func() config.IConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.IConfig)
		}
	}

	return r0
}

// EventDispatcher provides a mock function with given fields:
func (_m *MockIModuleContext) EventDispatcher() ddd.IEventDispatcher[ddd.IEvent] {
	ret := _m.Called()

	var r0 ddd.IEventDispatcher[ddd.IEvent]
	if rf, ok := ret.Get(0).(func() ddd.IEventDispatcher[ddd.IEvent]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ddd.IEventDispatcher[ddd.IEvent])
		}
	}

	return r0
}

// KvRepository provides a mock function with given fields:
func (_m *MockIModuleContext) KvRepository() repository.IKVRepository {
	ret := _m.Called()

	var r0 repository.IKVRepository
	if rf, ok := ret.Get(0).(func() repository.IKVRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.IKVRepository)
		}
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *MockIModuleContext) Logger() *zap.Logger {
	ret := _m.Called()

	var r0 *zap.Logger
	if rf, ok := ret.Get(0).(func() *zap.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	return r0
}

// Mux provides a mock function with given fields:
func (_m *MockIModuleContext) Mux() *chi.Mux {
	ret := _m.Called()

	var r0 *chi.Mux
	if rf, ok := ret.Get(0).(func() *chi.Mux); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chi.Mux)
		}
	}

	return r0
}

// NewMockIModuleContext creates a new instance of MockIModuleContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIModuleContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIModuleContext {
	mock := &MockIModuleContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
